[{"path":"http://www.reconverse.org/grates/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 grates authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"goal {grates} make easy group dates across range different time intervals. defines collection classes associated methods , together, formalise concept grouped dates intuitive use. assist formatting plots grates objects also provides x-axis scales can used conjunction {ggplot2} output. Currently implemented classes : grates_yearweek; grates_epiweek; grates_isoweek; grates_period; grates_yearmonth; grates_yearquarter; grates_year; grates_month underlying implementation objects build upon ideas Davis Vaughan unreleased {datea} package well Zhian Kamvar {aweek} package.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"yearweek","dir":"Articles","previous_headings":"grates objects","what":"yearweek, epiweek and isoweek","title":"Introduction","text":"yearweek objects stored number weeks (starting 0L) date firstday nearest Unix Epoch (1970-01-01). Put simply, number seven day periods : 1969-12-29 firstday equal 1 (Monday) 1969-12-30 firstday equal 2 (Tuesday) 1969-12-31 firstday equal 3 (Wednesday) 1970-01-01 firstday equal 4 (Thursday) 1970-01-02 firstday equal 5 (Friday) 1970-01-03 firstday equal 6 (Saturday) 1970-01-04 firstday equal 7 (Sunday) can constructed directly integers via new_yearweek() function generally easier use either as_yearweek() coercion function yearweek() constructor. as_yearweek() takes two arguments; x, vector (normally Date POSIXt) wish group, firstday, day week wish weeks start . yearweek() takes three arguments; year week integer vectors , , firstday value. epiweek class similar yearweek class , definition, always begin Sunday. stored integer number weeks (starting 0L) since 1970-01-04 internally akin <grates_yearweek_sunday> objects benefit slightly efficient implementations many associated methods. Likewise, isoweek class similar epiweek class uses ISO 8601 definition week always start Monday. Internally stored integer number weeks since 1969-12-29. default plots (using {ggplot2}) centre yearweek (epiweek / isoweek) labels:  can non-centred date labels x_axis utilising associated scale_x_grates functions explicitly specifying format date labels:","code":"library(grates)  # Choose some consecutive dates that begin on a Friday first <- as.Date(\"2021-01-01\") weekdays(first) #> [1] \"Friday\" dates <- first + 0:9  # Below we use a Friday-week grouping weeks <- as_yearweek(dates, firstday = 5L) (dat <- data.frame(dates, weeks)) #>         dates    weeks #> 1  2021-01-01 2021-W01 #> 2  2021-01-02 2021-W01 #> 3  2021-01-03 2021-W01 #> 4  2021-01-04 2021-W01 #> 5  2021-01-05 2021-W01 #> 6  2021-01-06 2021-W01 #> 7  2021-01-07 2021-W01 #> 8  2021-01-08 2021-W02 #> 9  2021-01-09 2021-W02 #> 10 2021-01-10 2021-W02  # we can also use the constructor function if we already have weeks and years yearweek(year =c(2020L, 2021L), week = c(1L, 10L), firstday = 5L) #> <grates_yearweek_friday[2]> #> [1] \"2020-W01\" \"2021-W10\"  # epiweeks always start on a Sunday (epiwk <- as_epiweek(Sys.Date())) #> <grates_epiweek[1]> #> [1] \"2024-W09\" weekdays(as.Date(epiwk)) #> [1] \"Sunday\"  # isoweeks always start on a Sunday (isowk <- as_isoweek(Sys.Date())) #> <grates_isoweek[1]> #> [1] \"2024-W09\" weekdays(as.Date(isowk)) #> [1] \"Monday\" library(ggplot2)  # use simulated linelist data from the outbreaks package dat <- outbreaks::ebola_sim_clean dat <- dat$linelist$date_of_infection  # calculate the total number for across each week week_dat <- aggregate(     list(cases = dat),     by = list(week = as_epiweek(dat)),     FUN = length )  head(week_dat) #>       week cases #> 1 2014-W12     1 #> 2 2014-W15     1 #> 3 2014-W16     1 #> 4 2014-W17     3 #> 5 2014-W18     6 #> 6 2014-W19    16  # plot the output (week_plot <-     ggplot(week_dat, aes(week, cases)) +      geom_col(width = 1, colour = \"white\") +     theme_bw()) week_plot + scale_x_grates_epiweek(format = \"%Y-%m-%d\")"},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"period","dir":"Articles","previous_headings":"grates objects","what":"Period","title":"Introduction","text":"period objects stored integer number, starting 0L, periods since Unix Epoch (1970-01-01) specified offset. periods taken mean groupings n consecutive days. Like yearweek objects, period objects can constructed directly via call new_period() easily via as_period() coercion function. as_period() takes 3 arguments; x, vector (normally Date POSIXt) wish group, n, integer number days wish group, offset, value wish start counting groups relative Unix Epoch. convenience, offset can given date want periods relative (internally date converted integer). Note storage calculation purposes, offset scaled relative n. .e. offset <- offset %% n values x stored relative scaled offset.","code":"# calculate the total number for across 14 day periods with no offset. # note - 0L is the default value for the offset but we specify it explicitly # here for added clarity period_dat <- aggregate(     list(cases = dat),     by = list(period = as_period(dat, n = 14L, offset = 0L)),     FUN = length )  head(period_dat) #>                     period cases #> 1 2014-03-13 to 2014-03-26     1 #> 2 2014-03-27 to 2014-04-09     1 #> 3 2014-04-10 to 2014-04-23     3 #> 4 2014-04-24 to 2014-05-07    19 #> 5 2014-05-08 to 2014-05-21    19 #> 6 2014-05-22 to 2014-06-04    30  # lower date bounds are used for the x axis ggplot(period_dat, aes(period, cases)) +     geom_col(width = 1, colour = \"white\") +     theme_bw( ) +     theme(axis.text.x = element_text(angle = 45, hjust=1)) +     xlab(\"\") # using a date as an offset start <- as.Date(\"2020-01-03\") dates <- start + 0:9 offset <- as.Date(\"2020-01-01\") data.frame(dates, period = as_period(dates, n = 7L, offset = offset)) #>         dates                   period #> 1  2020-01-03 2020-01-01 to 2020-01-07 #> 2  2020-01-04 2020-01-01 to 2020-01-07 #> 3  2020-01-05 2020-01-01 to 2020-01-07 #> 4  2020-01-06 2020-01-01 to 2020-01-07 #> 5  2020-01-07 2020-01-01 to 2020-01-07 #> 6  2020-01-08 2020-01-08 to 2020-01-14 #> 7  2020-01-09 2020-01-08 to 2020-01-14 #> 8  2020-01-10 2020-01-08 to 2020-01-14 #> 9  2020-01-11 2020-01-08 to 2020-01-14 #> 10 2020-01-12 2020-01-08 to 2020-01-14"},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"yearxxx","dir":"Articles","previous_headings":"grates objects","what":"yearmonth, yearquarter and year","title":"Introduction","text":"yearmonth, yearquarter year objects stored integer number months/quarters/years (starting 0L) since Unix Epoch (1970-01-01). Similar grates objects provide coercion construction functions.","code":"# calculate the monthly number of cases (month_dat <- aggregate(     list(cases = dat),     by = list(month = as_yearmonth(dat)),     FUN = length )) #>       month cases #> 1  2014-Mar     1 #> 2  2014-Apr     6 #> 3  2014-May    57 #> 4  2014-Jun    80 #> 5  2014-Jul   183 #> 6  2014-Aug   453 #> 7  2014-Sep   813 #> 8  2014-Oct   719 #> 9  2014-Nov   448 #> 10 2014-Dec   307 #> 11 2015-Jan   251 #> 12 2015-Feb   199 #> 13 2015-Mar   152 #> 14 2015-Apr    73  # plot with centred labels (month_plot <-      ggplot(month_dat, aes(month, cases)) +      geom_col(width = 1, colour = \"white\") +     theme_bw() +     theme(axis.text.x = element_text(angle = 45, hjust=1)) +     xlab(\"\")) # again we can have non-centred date labels by applying the associated scale month_plot + scale_x_grates_yearmonth(format = \"%Y-%m-%d\") # yearquarter works similarly (quarter_dat <- aggregate(     list(cases = dat),     by = list(quarter = as_yearquarter(dat)),     FUN = length )) #>   quarter cases #> 1 2014-Q1     1 #> 2 2014-Q2   143 #> 3 2014-Q3  1449 #> 4 2014-Q4  1474 #> 5 2015-Q1   602 #> 6 2015-Q2    73  ggplot(quarter_dat, aes(quarter, cases)) +      geom_col(width = 1, colour = \"white\") +     theme_bw() +     theme(axis.text.x = element_text(angle = 45, hjust=1)) +     xlab(\"\") # year also works similarly (year_dat <- aggregate(     list(cases = dat),     by = list(year = as_year(dat)),     length )) #>   year cases #> 1 2014  3067 #> 2 2015   675  ggplot(year_dat, aes(year, cases)) +      geom_col(width = 1, colour = \"white\") +     theme_bw() +     theme(axis.text.x = element_text(angle = 45, hjust=1)) +     xlab(\"\") # Construction functions can also be used yearmonth(2022L, 11L) #> <grates_yearmonth[1]> #> [1] \"2022-Nov\" yearquarter(2022L, 4L) #> <grates_yearquarter[1]> #> [1] \"2022-Q4\" year(2022L) #> <grates_year[1]> #> [1] 2022"},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"month","dir":"Articles","previous_headings":"grates objects","what":"month","title":"Introduction","text":"month objects stored integer number n-month groups (starting 0L) since Unix Epoch (1970-01-01). n-months taken mean ‘grouping n consecutive months’. <grates_month> objects can constructed directly integers via new_month() function coercion via as_month() function. as_period() takes 2 arguments; x, vector (normally Date POSIXt) wish group, n, integer number months wish group.  Note default plotting behaviour non-centred date labels different yearweek, yearmonth, yearquarter year scales labels centred default. obtain centred labels must explicitly set format NULL scale:","code":"# calculate the bimonthly number of cases (bimonth_dat <- aggregate(     list(cases = dat),     by = list(group = as_month(dat, n = 2L)),     FUN = length )) #>                  group cases #> 1 2014-Mar to 2014-Apr     7 #> 2 2014-May to 2014-Jun   137 #> 3 2014-Jul to 2014-Aug   636 #> 4 2014-Sep to 2014-Oct  1532 #> 5 2014-Nov to 2014-Dec   755 #> 6 2015-Jan to 2015-Feb   450 #> 7 2015-Mar to 2015-Apr   225  # by default lower date bounds are used for the x axis (bimonth_plot <-      ggplot(bimonth_dat, aes(group, cases)) +      geom_col(width = 1, colour = \"white\") +     theme_bw() +     theme(axis.text.x = element_text(angle = 45, hjust=1)) +     xlab(\"\")) bimonth_plot + scale_x_grates_month(format = NULL, n = 2L)"},{"path":"http://www.reconverse.org/grates/dev/articles/grates.html","id":"methods-and-operations","dir":"Articles","previous_headings":"","what":"Methods and operations","title":"Introduction","text":"grates objects added many methods operations ensure logical consistent behaviour. things break try provide detailed messaging explaining errors occurred. Whilst behviour implemented grates objects, illustrate manifests epiweek objects.","code":"# use the unique epiweeks from the earlier example x <- week_dat$week  # min, max and range (minx <- min(x)) #> <grates_epiweek[1]> #> [1] \"2014-W12\" (maxx <- max(x)) #> <grates_epiweek[1]> #> [1] \"2015-W17\" (rangex <- range(x)) #> <grates_epiweek[2]> #> [1] \"2014-W12\" \"2015-W17\"  # seq method works if both `from` and `to` are epiweeks seq(from = minx, to = maxx, by = 6L) #> <grates_epiweek[10]> #>  [1] \"2014-W12\" \"2014-W18\" \"2014-W24\" \"2014-W30\" \"2014-W36\" \"2014-W42\" #>  [7] \"2014-W48\" \"2015-W01\" \"2015-W07\" \"2015-W13\"  # but will error informatively if `to` is a different class try(seq(from = minx, to = 999, by = 6L)) #> Error in seq.grates_epiweek(from = minx, to = 999, by = 6L) :  #>   `to` must be a <grates_epiweek> object of length 1.  # conversion of yearweek objects back to dates will return the date at the # lower bound of each yearweek interval dat <- head(week_dat) transform(dat, new_date = as.Date(week)) #>       week cases   new_date #> 1 2014-W12     1 2014-03-16 #> 2 2014-W15     1 2014-04-06 #> 3 2014-W16     1 2014-04-13 #> 4 2014-W17     3 2014-04-20 #> 5 2014-W18     6 2014-04-27 #> 6 2014-W19    16 2014-05-04  # addition (subtraction) of wholenumbers will add (subtract) the corresponding # number of weeks to (from) the object (dat <- transform(dat, plus4 = week + 4L, minus4 = week - 4L)) #>       week cases    plus4   minus4 #> 1 2014-W12     1 2014-W16 2014-W08 #> 2 2014-W15     1 2014-W19 2014-W11 #> 3 2014-W16     1 2014-W20 2014-W12 #> 4 2014-W17     3 2014-W21 2014-W13 #> 5 2014-W18     6 2014-W22 2014-W14 #> 6 2014-W19    16 2014-W23 2014-W15  # addition of two yearweek objects will error as the intention is unclear try(transform(dat, willerror = week + week)) #> Error in Ops.grates_epiweek(week, week) :  #>   Cannot add <grates_epiweek> objects to each other.  # Subtraction of two yearweek objects gives the difference in weeks between them transform(dat, difference = plus4 - minus4) #>       week cases    plus4   minus4 difference #> 1 2014-W12     1 2014-W16 2014-W08    8 weeks #> 2 2014-W15     1 2014-W19 2014-W11    8 weeks #> 3 2014-W16     1 2014-W20 2014-W12    8 weeks #> 4 2014-W17     3 2014-W21 2014-W13    8 weeks #> 5 2014-W18     6 2014-W22 2014-W14    8 weeks #> 6 2014-W19    16 2014-W23 2014-W15    8 weeks  # epiweeks can be combined with themselves but not other classes (assuming an # epiweek object is the first entry) c(minx, maxx) #> <grates_epiweek[2]> #> [1] \"2014-W12\" \"2015-W17\" identical(c(minx, maxx), rangex) #> [1] TRUE try(c(minx, 1L)) #> Error in c.grates_epiweek(minx, 1L) :  #>   Unable to combine <grates_epiweek> objects with other classes."},{"path":"http://www.reconverse.org/grates/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Taylor. Author, maintainer.","code":""},{"path":"http://www.reconverse.org/grates/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taylor T (2024). grates: Grouped Date Classes. R package version 1.1.0.9000, https://github.com/reconverse/grates, https://www.reconverse.org/grates/.","code":"@Manual{,   title = {grates: Grouped Date Classes},   author = {Tim Taylor},   year = {2024},   note = {R package version 1.1.0.9000, https://github.com/reconverse/grates},   url = {https://www.reconverse.org/grates/}, }"},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"grates","dir":"","previous_headings":"","what":"Grouped Date Classes","title":"Grouped Date Classes","text":"goal {grates} provide simple coherent implementation grouped date classes.","code":""},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Grouped Date Classes","text":"can install released version {grates} CRAN : development version {grates} can installed GitHub :","code":"install.packages(\"grates\") remotes::install_github(\"reconverse/grates\", build_vignettes = TRUE)"},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Grouped Date Classes","text":"detailed introduction {grates} can found included vignette","code":"vignette(\"grates\", package = \"grates\")"},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a epiweek object — as_epiweek","title":"Coerce to a epiweek object — as_epiweek","text":"Generic conversion <grates_epiweek>","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a epiweek object — as_epiweek","text":"","code":"as_epiweek(x, ...)  # S3 method for default as_epiweek(x, ...)  # S3 method for Date as_epiweek(x, ...)  # S3 method for POSIXt as_epiweek(x, ...)  # S3 method for character as_epiweek(x, format, tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), ...)  # S3 method for factor as_epiweek(x, format, tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a epiweek object — as_epiweek","text":"x R object. ... values passed .Date(). format [character] Passed .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\". specified, try tryFormats one one first non-NA element, give error none works. Otherwise, processing via strptime() whose help page describes available conversion specifications. tryFormats [character] Format strings try format specified.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a epiweek object — as_epiweek","text":"<grates_epiweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to a epiweek object — as_epiweek","text":"Date, POSIXct, POSIXlt converted timezone respected. Character objects first coerced date via .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\" parsed accordingly.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_epiweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a epiweek object — as_epiweek","text":"","code":"as_epiweek(Sys.Date()) #> <grates_epiweek[1]> #> [1] \"2024-W09\" as_epiweek(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\")) #> <grates_epiweek[1]> #> [1] \"2019-W10\" as_epiweek(\"2019-05-03\") #> <grates_epiweek[1]> #> [1] \"2019-W18\" as_epiweek(\"2019-W12\", format = \"yearweek\") #> <grates_epiweek[1]> #> [1] \"2019-W12\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a isoweek object — as_isoweek","title":"Coerce to a isoweek object — as_isoweek","text":"Generic conversion <grates_isoweek>","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a isoweek object — as_isoweek","text":"","code":"as_isoweek(x, ...)  # S3 method for default as_isoweek(x, ...)  # S3 method for Date as_isoweek(x, ...)  # S3 method for POSIXt as_isoweek(x, ...)  # S3 method for character as_isoweek(x, format, tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), ...)  # S3 method for factor as_isoweek(x, format, tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a isoweek object — as_isoweek","text":"x R object. ... values passed .Date(). format [character] Passed .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\". specified, try tryFormats one one first non-NA element, give error none works. Otherwise, processing via strptime() whose help page describes available conversion specifications. tryFormats [character] Format strings try format specified.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a isoweek object — as_isoweek","text":"<grates_isoweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to a isoweek object — as_isoweek","text":"Date, POSIXct, POSIXlt converted timezone respected. Character objects first coerced date via .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\" parsed accordingly.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_isoweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a isoweek object — as_isoweek","text":"","code":"as_isoweek(Sys.Date()) #> <grates_isoweek[1]> #> [1] \"2024-W09\" as_isoweek(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\")) #> <grates_isoweek[1]> #> [1] \"2019-W10\" as_isoweek(\"2019-05-03\") #> <grates_isoweek[1]> #> [1] \"2019-W18\" as_isoweek(\"2019-W12\", format = \"yearweek\") #> <grates_isoweek[1]> #> [1] \"2019-W12\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to month — as_month","title":"Coerce an object to month — as_month","text":"as_month() generic coercing input <grates_month>.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to month — as_month","text":"","code":"as_month(x, n, ...)  # S3 method for default as_month(x, n, ...)  # S3 method for Date as_month(x, n, ...)  # S3 method for POSIXt as_month(x, n, ...)  # S3 method for character as_month(x, n, ...)  # S3 method for factor as_month(x, n, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to month — as_month","text":"x R object. Character input first parsed using .Date(). POSIXt inputs converted timezone respected. n [integer] Number months grouped. Must greater 1 (use as_yearmonth() case). ... used character input additional arguments passed .Date().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to month — as_month","text":"<grates_month> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an object to month — as_month","text":"Internally grates_month objects stored position, starting 0, n-month groups since Unix Epoch (1970-01-01). n-months taken mean 'grouping n consecutive months'. Precision month level (.e. day  month always dropped).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coerce an object to month — as_month","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to month — as_month","text":"","code":"as_month(\"2019-05-03\", n = 4L) #> <grates_yearmonth[1]> #> [1] \"2019-May to 2019-Aug\" as_month(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), n = 2) #> <grates_yearmonth[1]> #> [1] \"2019-Mar to 2019-Apr\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to period — as_period","title":"Coerce an object to period — as_period","text":"as_period() generic coercing input <grates_period>.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to period — as_period","text":"","code":"as_period(x, n, ...)  # S3 method for default as_period(x, n = 1L, offset = 0L, ...)  # S3 method for Date as_period(x, n = 1L, offset = 0L, ...)  # S3 method for POSIXt as_period(x, n = 1L, offset = 0L, ...)  # S3 method for character as_period(x, n = 1L, offset = 0L, ...)  # S3 method for factor as_period(x, n = 1L, offset = 0L, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to period — as_period","text":"x R object: Character input first parsed using .Date(). POSIXt inputs converted timezone respected. n [integer] Number days grouped. ... used character input additional arguments passed .Date(). offset [integer] [date] Value wish start counting periods relative Unix Epoch: integer values stored scaled n (offset <- .integer(offset) %% n). date values first converted integer offset (offset <- floor(.numeric(offset))) scaled via n .","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to period — as_period","text":"<grates_period> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an object to period — as_period","text":"Internally grates_period objects stored integer number, starting 0L, periods since Unix Epoch (1970-01-01) specified offset. periods taken mean groupings n consecutive days.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to period — as_period","text":"","code":"as_period(\"2019-05-03\") #> <grates_period[1]> #> [1] \"2019-05-03\" as_period(\"2019-05-03\", n = 2, offset = 1) #> <grates_period[1]> #> [1] \"2019-05-03 to 2019-05-04\" as_period(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), n = 10) #> <grates_period[1]> #> [1] \"2019-02-23 to 2019-03-04\" as_period(as.Date(\"2020-03-02\"), n = 2L, offset = as.Date(\"2020-03-01\")) #> <grates_period[1]> #> [1] \"2020-03-01 to 2020-03-02\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to year-quarter — as_year","title":"Coerce an object to year-quarter — as_year","text":"as_year() generic coercing input <grates_year>.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to year-quarter — as_year","text":"","code":"as_year(x, ...)  # S3 method for default as_year(x, ...)  # S3 method for Date as_year(x, ...)  # S3 method for POSIXt as_year(x, ...)  # S3 method for character as_year(x, ...)  # S3 method for factor as_year(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to year-quarter — as_year","text":"x R object. Character input first parsed using .Date(). POSIXct POSIXlt converted timezone respected. ... used character input additional arguments passed .Date().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to year-quarter — as_year","text":"<grates_year> object.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to year-quarter — as_year","text":"","code":"as_year(Sys.Date()) #> <grates_year[1]> #> [1] 2024 as_year(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_year[1]> #> [1] 2019 as_year(\"2019-05-03\") #> <grates_year[1]> #> [1] 2019"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to year-month — as_yearmonth","title":"Coerce an object to year-month — as_yearmonth","text":"as_yearmonth() generic coercing input <grates_yearmonth>. Character input first parsed using .Date(). POSIXct POSIXlt converted, timezone respected.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to year-month — as_yearmonth","text":"","code":"as_yearmonth(x, ...)  # S3 method for default as_yearmonth(x, ...)  # S3 method for Date as_yearmonth(x, ...)  # S3 method for POSIXt as_yearmonth(x, ...)  # S3 method for character as_yearmonth(x, ...)  # S3 method for factor as_yearmonth(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to year-month — as_yearmonth","text":"x R object. ... used character input additional arguments passed .Date().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to year-month — as_yearmonth","text":"<grates_yearmonth> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an object to year-month — as_yearmonth","text":"Internally <grates_yearmonth> objects stored number months (starting 0) since Unix Epoch (1970-01-01). Precision month level (.e. day month always dropped).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coerce an object to year-month — as_yearmonth","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearmonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to year-month — as_yearmonth","text":"","code":"as_yearmonth(Sys.Date()) #> <grates_yearmonth[1]> #> [1] \"2024-Feb\" as_yearmonth(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_yearmonth[1]> #> [1] \"2019-Mar\" as_yearmonth(\"2019-05-03\") #> <grates_yearmonth[1]> #> [1] \"2019-May\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to year-quarter — as_yearquarter","title":"Coerce an object to year-quarter — as_yearquarter","text":"as_yearquarter() generic coercing input <grates_yearquarter>. Character input first parsed using .Date(). POSIXct POSIXlt converted, timezone respected.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to year-quarter — as_yearquarter","text":"","code":"as_yearquarter(x, ...)  # S3 method for default as_yearquarter(x, ...)  # S3 method for Date as_yearquarter(x, ...)  # S3 method for POSIXt as_yearquarter(x, ...)  # S3 method for character as_yearquarter(x, ...)  # S3 method for factor as_yearquarter(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to year-quarter — as_yearquarter","text":"x R object ... used character input additional arguments passed .Date().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to year-quarter — as_yearquarter","text":"<grates_yearquarter> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce an object to year-quarter — as_yearquarter","text":"Internally <grates_yearquarter> objects stored number quarters (starting 0) since Unix Epoch (1970-01-01).","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearquarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to year-quarter — as_yearquarter","text":"","code":"as_yearquarter(Sys.Date()) #> <grates_yearquarter[1]> #> [1] \"2024-Q1\" as_yearquarter(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_yearquarter[1]> #> [1] \"2019-Q1\" as_yearquarter(\"2019-05-03\") #> <grates_yearquarter[1]> #> [1] \"2019-Q2\""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a yearweek object — as_yearweek","title":"Coerce to a yearweek object — as_yearweek","text":"Generic conversion <grates_yearweek>.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a yearweek object — as_yearweek","text":"","code":"as_yearweek(x, ...)  # S3 method for default as_yearweek(x, ...)  # S3 method for Date as_yearweek(x, firstday = 1L, ...)  # S3 method for POSIXt as_yearweek(x, firstday = 1L, ...)  # S3 method for character as_yearweek(   x,   firstday = 1L,   format,   tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"),   ... )  # S3 method for factor as_yearweek(   x,   firstday = 1L,   format,   tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"),   ... )"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a yearweek object — as_yearweek","text":"x R object. ... values passed .Date(). firstday [integer] day week starts 1 (Monday) 7 (Sunday). format [character] Passed .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\". specified, try tryFormats one one first non-NA element, give error none works. Otherwise, processing via strptime() whose help page describes available conversion specifications. tryFormats [character] Format strings try format specified.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a yearweek object — as_yearweek","text":"<grates_yearweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to a yearweek object — as_yearweek","text":"Date, POSIXct, POSIXlt converted timezone respected. Character objects first coerced date via .Date() unless format = \"yearweek\" case input assumed form \"YYYY-Wxx\" parsed accordingly.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a yearweek object — as_yearweek","text":"","code":"as_yearweek(Sys.Date()) #> <grates_yearweek_monday[1]> #> [1] \"2024-W09\" as_yearweek(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\")) #> <grates_yearweek_monday[1]> #> [1] \"2019-W10\" as_yearweek(\"2019-05-03\", firstday = 5L) #> <grates_yearweek_friday[1]> #> [1] \"2019-W18\" as_yearweek(\"2019-W12\", format = \"yearweek\") #> <grates_yearweek_monday[1]> #> [1] \"2019-W12\""},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for epiweek objects — epiweek","title":"Constructor for epiweek objects — epiweek","text":"epiweek() constructor <grates_epiweek> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for epiweek objects — epiweek","text":"","code":"epiweek(year = integer(), week = integer())"},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for epiweek objects — epiweek","text":"year [integer] Vector representing year associated week. double vectors converted via .integer(floor(x)). week [integer] Vector representing week associated `year. double vectors converted via .integer(floor(x)).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for epiweek objects — epiweek","text":"<grates_epiweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for epiweek objects — epiweek","text":"Epiweeks defined start Sunday <grates_epiweek> objects stored number weeks (starting 0) first Sunday Unix Epoch (1970-01-01). , number seven day periods 1970-01-04. Internally representation <grates_yearweek_sunday> object akin alias marginally efficient implementation.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/epiweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for epiweek objects — epiweek","text":"","code":"epiweek(year = 2000L, week = 3L) #> <grates_epiweek[1]> #> [1] \"2000-W03\""},{"path":"http://www.reconverse.org/grates/dev/reference/grates-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in package grates — grates-defunct","title":"Defunct functions in package grates — grates-defunct","text":"functions variables listed now defunct, .e. longer available.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions in package grates — grates-defunct","text":"","code":"int_period(x = integer(), n = 1L, origin = 0L)  as_int_period(x, ...)  is_int_period(x)  scale_x_grates_int_period(n.breaks = 6, n, origin)"},{"path":"http://www.reconverse.org/grates/dev/reference/grates-defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defunct functions in package grates — grates-defunct","text":"<grates_int_period> class associated functions removed version 1.0.0.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grouped_date_accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessors for grate objects — grouped_date_accessors","title":"Accessors for grate objects — grouped_date_accessors","text":"Generics methods accessing information grouped date objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grouped_date_accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessors for grate objects — grouped_date_accessors","text":"","code":"get_firstday(x, ...)  # S3 method for default get_firstday(x, ...)  # S3 method for grates_yearweek_monday get_firstday(x, ...)  # S3 method for grates_yearweek_tuesday get_firstday(x, ...)  # S3 method for grates_yearweek_wednesday get_firstday(x, ...)  # S3 method for grates_yearweek_thursday get_firstday(x, ...)  # S3 method for grates_yearweek_friday get_firstday(x, ...)  # S3 method for grates_yearweek_saturday get_firstday(x, ...)  # S3 method for grates_yearweek_sunday get_firstday(x, ...)  get_week(x, ...)  # S3 method for default get_week(x, ...)  # S3 method for grates_yearweek get_week(x, ...)  # S3 method for grates_epiweek get_week(x, ...)  # S3 method for grates_isoweek get_week(x, ...)  get_year(x, ...)  # S3 method for default get_year(x, ...)  # S3 method for grates_yearweek get_year(x, ...)  # S3 method for grates_epiweek get_year(x, ...)  # S3 method for grates_isoweek get_year(x, ...)  # S3 method for grates_yearmonth get_year(x, ...)  # S3 method for grates_yearquarter get_year(x, ...)  # S3 method for grates_year get_year(x, ...)  get_n(x, ...)  # S3 method for default get_n(x, ...)  # S3 method for grates_month get_n(x, ...)  # S3 method for grates_period get_n(x, ...)  get_offset(x, ...)  # S3 method for default get_offset(x, ...)  # S3 method for grates_period get_offset(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/grouped_date_accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessors for grate objects — grouped_date_accessors","text":"x R object ... currently used","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grouped_date_accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessors for grate objects — grouped_date_accessors","text":"Requested value error method available.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grouped_date_accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessors for grate objects — grouped_date_accessors","text":"","code":"dates <- as.Date(\"2020-01-01\") + 1:14 dat <- as_isoweek(dates) get_week(dat) #>  [1] 1 1 1 1 2 2 2 2 2 2 2 3 3 3 get_year(dat) #>  [1] 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020"},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for isoweek objects — isoweek","title":"Constructor for isoweek objects — isoweek","text":"isoweek() constructor <grates_isoweek> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for isoweek objects — isoweek","text":"","code":"isoweek(year = integer(), week = integer())"},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for isoweek objects — isoweek","text":"year [integer] Vector representing year associated week. double vectors converted via .integer(floor(x)). week [integer] Vector representing week associated `year. double vectors converted via .integer(floor(x)).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for isoweek objects — isoweek","text":"<grates_isoweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for isoweek objects — isoweek","text":"isoweeks defined start Monday <grates_isoweek> objects stored number weeks (starting 0) first Monday prior Unix Epoch (1970-01-01). , number seven day periods 1969-12-29. Internally representation <grates_yearweek_monday> object akin alias marginally efficient implementation.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/isoweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for isoweek objects — isoweek","text":"","code":"isoweek(year = 2000L, week = 3L) #> <grates_isoweek[1]> #> [1] \"2000-W03\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for an epiweek object — new_epiweek","title":"Minimal constructor for an epiweek object — new_epiweek","text":"new_epiweek() constructor <grates_epiweek> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for an epiweek object — new_epiweek","text":"","code":"new_epiweek(x = integer())  is_epiweek(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for an epiweek object — new_epiweek","text":"x [integer] Vector representing number weeks. double vectors converted via .integer(floor(x)). xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for an epiweek object — new_epiweek","text":"<grates_epiweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for an epiweek object — new_epiweek","text":"Epiweeks defined start Sunday <grates_epiweek> objects stored number weeks (starting 0) first Sunday Unix Epoch (1970-01-01). , number seven day periods 1970-01-04. Internally representation <grates_yearweek_sunday> object akin alias marginally efficient implementation.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/new_epiweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for an epiweek object — new_epiweek","text":"","code":"new_epiweek(1:10) #> <grates_epiweek[10]> #>  [1] \"1970-W02\" \"1970-W03\" \"1970-W04\" \"1970-W05\" \"1970-W06\" \"1970-W07\" #>  [7] \"1970-W08\" \"1970-W09\" \"1970-W10\" \"1970-W11\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for an isoweek object — new_isoweek","title":"Minimal constructor for an isoweek object — new_isoweek","text":"new_isoweek() constructor <grates_isoweek> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for an isoweek object — new_isoweek","text":"","code":"new_isoweek(x = integer())  is_isoweek(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for an isoweek object — new_isoweek","text":"x [integer] Vector representing number weeks. double vectors converted via .integer(floor(x)). xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for an isoweek object — new_isoweek","text":"<grates_isoweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for an isoweek object — new_isoweek","text":"isoweeks defined start Monday <grates_isoweek> objects stored number weeks (starting 0) first Monday prior Unix Epoch (1970-01-01). , number seven day periods 1969-12-29. Internally representation <grates_yearweek_monday> object akin alias marginally efficient implementation.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/new_isoweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for an isoweek object — new_isoweek","text":"","code":"new_isoweek(1:10) #> <grates_isoweek[10]> #>  [1] \"1970-W02\" \"1970-W03\" \"1970-W04\" \"1970-W05\" \"1970-W06\" \"1970-W07\" #>  [7] \"1970-W08\" \"1970-W09\" \"1970-W10\" \"1970-W11\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal Constructor for a month object — new_month","title":"Minimal Constructor for a month object — new_month","text":"new_month() constructor <grates_month> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal Constructor for a month object — new_month","text":"","code":"new_month(x = integer(), n)  is_month(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal Constructor for a month object — new_month","text":"x [integer] Vector representing number n-months since Unix Epoch (1970-01-01). double vectors converted via .integer(floor(x)). n [integer] Number months grouped. Must greater 1 (use yearmonth() case). xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal Constructor for a month object — new_month","text":"<grates_month> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal Constructor for a month object — new_month","text":"grates_month objects stored integer number (starting 0), n-month groups since Unix Epoch (1970-01-01). n-months taken mean 'grouping n consecutive months'.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimal Constructor for a month object — new_month","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal Constructor for a month object — new_month","text":"","code":"new_month(1:10, 2L) #> <grates_yearmonth[10]> #>  [1] \"1970-Mar to 1970-Apr\" \"1970-May to 1970-Jun\" \"1970-Jul to 1970-Aug\" #>  [4] \"1970-Sep to 1970-Oct\" \"1970-Nov to 1970-Dec\" \"1971-Jan to 1971-Feb\" #>  [7] \"1971-Mar to 1971-Apr\" \"1971-May to 1971-Jun\" \"1971-Jul to 1971-Aug\" #> [10] \"1971-Sep to 1971-Oct\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for a period object — new_period","title":"Minimal constructor for a period object — new_period","text":"new_period() constructor <grates_period> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for a period object — new_period","text":"","code":"new_period(x = integer(), n = 1L, offset = 0L)  is_period(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for a period object — new_period","text":"x [integer] Vector representing number periods since Unix Epoch (1970-01-01) specified offset. double vectors converted via .integer(floor(x)). n [integer] Number days grouped . offset [integer] Value wish start counting groups relative Unix Epoch. xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for a period object — new_period","text":"<grates_period> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for a period object — new_period","text":"grates_period objects stored integer number, starting 0L, periods since Unix Epoch (1970-01-01) specified offset. periods taken mean groupings n consecutive days. storage calculation purposes, offset scaled relative n. .e. offset <- offset %% n values x stored relative scaled offset.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for a period object — new_period","text":"","code":"new_period(1:10) #> <grates_period[10]> #>  [1] \"1970-01-02\" \"1970-01-03\" \"1970-01-04\" \"1970-01-05\" \"1970-01-06\" #>  [6] \"1970-01-07\" \"1970-01-08\" \"1970-01-09\" \"1970-01-10\" \"1970-01-11\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for a yearmonth object — new_yearmonth","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"new_yearmonth() constructor <grates_yearmonth> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"","code":"new_yearmonth(x = integer())  is_yearmonth(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"x [integer] Vector representing number months. double vectors converted via .integer(floor(x)). xx R object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"<grates_yearmonth> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"<grates_yearmonth> objects stored number months (starting 0) since Unix Epoch (1970-01-01). Precision month level (.e. day month always dropped).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearmonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for a yearmonth object — new_yearmonth","text":"","code":"new_yearmonth(1:10) #> <grates_yearmonth[10]> #>  [1] \"1970-Feb\" \"1970-Mar\" \"1970-Apr\" \"1970-May\" \"1970-Jun\" \"1970-Jul\" #>  [7] \"1970-Aug\" \"1970-Sep\" \"1970-Oct\" \"1970-Nov\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for a yearquarter object — new_yearquarter","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"new_yearquarter() constructor <grates_yearquarter> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"","code":"new_yearquarter(x = integer())  is_yearquarter(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"x [integer] Vector representing number quarters. double vectors converted via .integer(floor(x)). xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"<grates_yearquarter> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"<yearquarter> objects stored number quarters (starting 0) since Unix Epoch (1970-01-01).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearquarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for a yearquarter object — new_yearquarter","text":"","code":"new_yearquarter(1:10) #> <grates_yearquarter[10]> #>  [1] \"1970-Q2\" \"1970-Q3\" \"1970-Q4\" \"1971-Q1\" \"1971-Q2\" \"1971-Q3\" \"1971-Q4\" #>  [8] \"1972-Q1\" \"1972-Q2\" \"1972-Q3\""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal constructor for a yearweek object — new_yearweek","title":"Minimal constructor for a yearweek object — new_yearweek","text":"new_yearweek() constructor <grates_yearweek> objects aimed developers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal constructor for a yearweek object — new_yearweek","text":"","code":"new_yearweek(x = integer(), firstday = 1L)  is_yearweek(xx)"},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal constructor for a yearweek object — new_yearweek","text":"x [integer] Vector representing number weeks. double vectors converted via .integer(floor(x)). firstday [integer] day week starts 1 (Monday) 7 (Sunday). xx R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal constructor for a yearweek object — new_yearweek","text":"<grates_yearweek> object subclass corresponding first day week represent (e.g. <grates_yearweek_monday>).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal constructor for a yearweek object — new_yearweek","text":"<grates_yearweek> objects stored number weeks (starting 0) date firstday nearest Unix Epoch (1970-01-01). , number seven day periods :","code":"- 1969-12-29 for `firstday` equal to 1 (Monday) - 1969-12-30 for `firstday` equal to 2 (Tuesday) - 1969-12-31 for `firstday` equal to 3 (Wednesday) - 1970-01-01 for `firstday` equal to 4 (Thursday) - 1970-01-02 for `firstday` equal to 5 (Friday) - 1970-01-03 for `firstday` equal to 6 (Saturday) - 1970-01-04 for `firstday` equal to 7 (Sunday)"},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/new_yearweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal constructor for a yearweek object — new_yearweek","text":"","code":"new_yearweek(1:10) #> <grates_yearweek_monday[10]> #>  [1] \"1970-W02\" \"1970-W03\" \"1970-W04\" \"1970-W05\" \"1970-W06\" \"1970-W07\" #>  [7] \"1970-W08\" \"1970-W09\" \"1970-W10\" \"1970-W11\""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a month object — print.grates_month","title":"Print a month object — print.grates_month","text":"Print month object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a month object — print.grates_month","text":"","code":"# S3 method for grates_month print(x, format = \"%Y-%b\", sep = \"to\", ...)  # S3 method for grates_month format(x, format = \"%Y-%b\", sep = \"to\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a month object — print.grates_month","text":"x <grates_month> object. format [character] format use bounds value. sep [character] one month grouped others, sep placed upper lower bounds printing. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a period object — print.grates_period","title":"Print a period object — print.grates_period","text":"Print period object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a period object — print.grates_period","text":"","code":"# S3 method for grates_period print(x, format = \"%Y-%m-%d\", sep = \"to\", ...)  # S3 method for grates_period format(x, format = \"%Y-%m-%d\", sep = \"to\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a period object — print.grates_period","text":"x <grates_period> object. format [character] format use bounds value. sep [character] one day grouped others, sep placed upper lower bounds printing. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a year-quarter object — print.grates_year","title":"Print a year-quarter object — print.grates_year","text":"Print year-quarter object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a year-quarter object — print.grates_year","text":"","code":"# S3 method for grates_year print(x, ...)  # S3 method for grates_year format(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a year-quarter object — print.grates_year","text":"x <grates_year> object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a year-month object — print.grates_yearmonth","title":"Print a year-month object — print.grates_yearmonth","text":"Print year-month object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a year-month object — print.grates_yearmonth","text":"","code":"# S3 method for grates_yearmonth print(x, format = \"%Y-%b\", ...)  # S3 method for grates_yearmonth format(x, format = \"%Y-%b\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a year-month object — print.grates_yearmonth","text":"x <grates_yearmonth> object. format format use printing. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearquarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a year-quarter object — print.grates_yearquarter","title":"Print a year-quarter object — print.grates_yearquarter","text":"Print year-quarter object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearquarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a year-quarter object — print.grates_yearquarter","text":"","code":"# S3 method for grates_yearquarter print(x, ...)  # S3 method for grates_yearquarter format(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/print.grates_yearquarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a year-quarter object — print.grates_yearquarter","text":"x <grates_yearquarter> object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/s3_register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a method for a suggested dependency — s3_register","title":"Register a method for a suggested dependency — s3_register","text":"Generally, recommend way register S3 method use S3Method() namespace directive (often generated automatically @export roxygen2 tag). However, technique requires generic imported package, sometimes want suggest package, provide method package loaded. s3_register() can called package's .onLoad() dynamically register method generic's package loaded.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/s3_register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a method for a suggested dependency — s3_register","text":"generic Name generic form pkg::generic. class Name class method Optionally, implementation method. default, found looking function called generic.class package environment. Note providing method can dangerous use devtools. namespace method reloaded devtools::load_all(), function keep inheriting old namespace. might cause crashes dangling .Call() pointers.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/s3_register.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a method for a suggested dependency — s3_register","text":"R 3.5.0 later, s3_register() also useful demonstrating class creation vignette, since method lookup longer always involves lexical scope. R 3.6.0 later, can achieve similar effect using \"delayed method registration\", .e. placing following NAMESPACE file:","code":"if (getRversion() >= \"3.6.0\") {   S3method(package::generic, class) }"},{"path":"http://www.reconverse.org/grates/dev/reference/s3_register.html","id":"usage-in-other-packages","dir":"Reference","previous_headings":"","what":"Usage in other packages","title":"Register a method for a suggested dependency — s3_register","text":"avoid taking dependency vctrs, copy source s3_register() package. licensed permissive unlicense make crystal clear happy . need include license even credit us using function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/s3_register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a method for a suggested dependency — s3_register","text":"","code":"# A typical use case is to dynamically register tibble/pillar methods # for your class. That way you avoid creating a hard dependency on packages # that are not essential, while still providing finer control over # printing when they are used.  .onLoad <- function(...) {   s3_register(\"pillar::pillar_shaft\", \"vctrs_vctr\")   s3_register(\"tibble::type_sum\", \"vctrs_vctr\") }"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_epiweek.html","id":null,"dir":"Reference","previous_headings":"","what":"epiweek scale — scale_x_grates_epiweek","title":"epiweek scale — scale_x_grates_epiweek","text":"ggplot2 scale <grates_epiweek> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_epiweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epiweek scale — scale_x_grates_epiweek","text":"","code":"scale_x_grates_epiweek(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_epiweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epiweek scale — scale_x_grates_epiweek","text":"... currently used. breaks <grates_epiweek> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL (default) labels standard yearweek format (YYYY-Www). NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_epiweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epiweek scale — scale_x_grates_epiweek","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_isoweek.html","id":null,"dir":"Reference","previous_headings":"","what":"isoweek scale — scale_x_grates_isoweek","title":"isoweek scale — scale_x_grates_isoweek","text":"ggplot2 scale <grates_isoweek> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_isoweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"isoweek scale — scale_x_grates_isoweek","text":"","code":"scale_x_grates_isoweek(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_isoweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"isoweek scale — scale_x_grates_isoweek","text":"... currently used. breaks <grates_isoweek> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL (default) labels standard yearweek format (YYYY-Www). NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_isoweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"isoweek scale — scale_x_grates_isoweek","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":null,"dir":"Reference","previous_headings":"","what":"month scale — scale_x_grates_month","title":"month scale — scale_x_grates_month","text":"ggplot2 scale month vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"month scale — scale_x_grates_month","text":"","code":"scale_x_grates_month(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = \"%Y-%m-%d\",   bounds_format = \"%Y-%b\",   sep = \"to\",   n )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"month scale — scale_x_grates_month","text":"... currently used. breaks <grates_month> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL labels centralised form \"lower category bound upper category bound\". NULL value used format.Date() can input acceptable function (defaults \"%Y-%m-%d). bounds_format Format use grouped date labels. used format NULL. sep [character] Separator use grouped date labels. n [integer] Number months used original grouping.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"month scale — scale_x_grates_month","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":null,"dir":"Reference","previous_headings":"","what":"period scale — scale_x_grates_period","title":"period scale — scale_x_grates_period","text":"ggplot2 scale <grates_period> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"period scale — scale_x_grates_period","text":"","code":"scale_x_grates_period(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = \"%Y-%m-%d\",   n,   offset )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"period scale — scale_x_grates_period","text":"... currently used. breaks <grates_period> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use dates. Value used format.Date() can input acceptable function. n [integer] Number days period. offset [integer] Number days used original grouping offset Unix Epoch.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"period scale — scale_x_grates_period","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":null,"dir":"Reference","previous_headings":"","what":"year scale — scale_x_grates_year","title":"year scale — scale_x_grates_year","text":"ggplot2 scale year vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"year scale — scale_x_grates_year","text":"","code":"scale_x_grates_year(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"year scale — scale_x_grates_year","text":"... currently used. breaks <grates_isoweek> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"year scale — scale_x_grates_year","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"yearmonth scale — scale_x_grates_yearmonth","title":"yearmonth scale — scale_x_grates_yearmonth","text":"ggplot2 scale yearmonth vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yearmonth scale — scale_x_grates_yearmonth","text":"","code":"scale_x_grates_yearmonth(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yearmonth scale — scale_x_grates_yearmonth","text":"... currently used. breaks <grates_yearmonth> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yearmonth scale — scale_x_grates_yearmonth","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearquarter.html","id":null,"dir":"Reference","previous_headings":"","what":"yearquarter scale — scale_x_grates_yearquarter","title":"yearquarter scale — scale_x_grates_yearquarter","text":"ggplot2 scale yearquarter vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearquarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yearquarter scale — scale_x_grates_yearquarter","text":"","code":"scale_x_grates_yearquarter(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearquarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yearquarter scale — scale_x_grates_yearquarter","text":"... currently used. breaks <grates_yearquarter> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). format Format use \"Date\" scales required. NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearquarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yearquarter scale — scale_x_grates_yearquarter","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"yearweek scale — scale_x_grates_yearweek","title":"yearweek scale — scale_x_grates_yearweek","text":"ggplot2 scale <grates_yearweek> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yearweek scale — scale_x_grates_yearweek","text":"","code":"scale_x_grates_yearweek(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6L,   firstday,   format = NULL )  scale_x_grates_yearweek_monday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_isoweek(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_tuesday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_wednesday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_thursday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_friday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_saturday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_sunday(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )  scale_x_grates_yearweek_epiweek(   ...,   breaks = ggplot2::waiver(),   n.breaks = 6,   format = NULL )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"yearweek scale — scale_x_grates_yearweek","text":"... currently used. breaks <grates_yearweek> vector desired breaks. n.breaks [integer] Approximate number breaks calculated using scales::breaks_pretty (default 6L). effect breaks = waiver(). firstday [integer] Integer value first weekday: 1 (Monday) 7 (Sunday). format Format use \"Date\" scales required. NULL (default) labels standard yearweek format (YYYY-Www). NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"yearweek scale — scale_x_grates_yearweek","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a year object — year","title":"Construct a year object — year","text":"year() constructor <grates_year> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a year object — year","text":"","code":"year(x = integer())  is_year(object)"},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a year object — year","text":"x [integer] Vector representing years. double vectors converted via .integer(floor(x)). object R object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a year object — year","text":"<grates_year> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a year object — year","text":"","code":"year(2011:2020) #> <grates_year[10]> #>  [1] 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020"},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for yearmonth objects — yearmonth","title":"Constructor for yearmonth objects — yearmonth","text":"yearmonth() constructor <grates_yearmonth> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for yearmonth objects — yearmonth","text":"","code":"yearmonth(year = integer(), month = integer())"},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for yearmonth objects — yearmonth","text":"year [integer] Vector representing year associated month. double vectors converted via .integer(floor(x)). month [integer] Vector representing month associated `year. double vectors converted via .integer(floor(x)).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for yearmonth objects — yearmonth","text":"<grates_yearmonth> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for yearmonth objects — yearmonth","text":"<grates_yearmonth> objects stored number months (starting 0) since Unix Epoch (1970-01-01).","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/yearmonth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for yearmonth objects — yearmonth","text":"","code":"yearmonth(year = 2000L, month = 3L) #> <grates_yearmonth[1]> #> [1] \"2000-Mar\""},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for yearquarter objects — yearquarter","title":"Constructor for yearquarter objects — yearquarter","text":"yearquarter() constructor <grates_yearquarter> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for yearquarter objects — yearquarter","text":"","code":"yearquarter(year = integer(), quarter = integer())"},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for yearquarter objects — yearquarter","text":"year [integer] Vector representing year associated quarter. double vectors converted via .integer(floor(x)). quarter [integer] Vector representing quarter associated `year. double vectors converted via .integer(floor(x)).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for yearquarter objects — yearquarter","text":"<grates_yearquarter> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for yearquarter objects — yearquarter","text":"<grates_yearquarter> objects stored number quarters (starting 0) since Unix Epoch (1970-01-01).","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/yearquarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for yearquarter objects — yearquarter","text":"","code":"yearquarter(year = 2000L, quarter = 3L) #> <grates_yearquarter[1]> #> [1] \"2000-Q3\""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for yearweek objects — yearweek","title":"Constructor for yearweek objects — yearweek","text":"yearweek() constructor <grates_yearweek> objects. weeks whose first day can specified user.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for yearweek objects — yearweek","text":"","code":"yearweek(year = integer(), week = integer(), firstday = 1L)"},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for yearweek objects — yearweek","text":"year [integer] Vector representing year associated week. double vectors converted via .integer(floor(x)). week [integer] Vector representing week associated `year. double vectors converted via .integer(floor(x)). firstday [integer] day week starts 1 (Monday) 7 (Sunday).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for yearweek objects — yearweek","text":"<grates_yearweek> object subclass corresponding first day week represent (e.g. <grates_yearweek_monday>).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for yearweek objects — yearweek","text":"yearweek objects first week \"year\" considered first yearweek containing 4 days given calendar year. means calendar year sometimes different associated yearweek object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Constructor for yearweek objects — yearweek","text":"Internally <grates_yearweek> objects stored number weeks (starting 0) date firstday nearest Unix Epoch (1970-01-01). , number seven day periods :","code":"- 1969-12-29 for `firstday` equal to 1 (Monday) - 1969-12-30 for `firstday` equal to 2 (Tuesday) - 1969-12-31 for `firstday` equal to 3 (Wednesday) - 1970-01-01 for `firstday` equal to 4 (Thursday) - 1970-01-02 for `firstday` equal to 5 (Friday) - 1970-01-03 for `firstday` equal to 6 (Saturday) - 1970-01-04 for `firstday` equal to 7 (Sunday)"},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for yearweek objects — yearweek","text":"","code":"yearweek(year = 2000L, week = 3L) #> <grates_yearweek_monday[1]> #> [1] \"2000-W03\""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-development-version","dir":"Changelog","previous_headings":"","what":"grates (development version)","title":"grates (development version)","text":"Users 3.5.0 release ggplot2 noticed additional “warnings” appearing within plot. now handled internally please raise issue reappear. Minor internal non-breaking changes motivated lintr.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-110","dir":"Changelog","previous_headings":"","what":"grates 1.1.0","title":"grates 1.1.0","text":"CRAN release: 2023-06-08 scale functions (e.g. scale_x_grates_isoweek()) gain breaks argument allow exact specification breaks.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-101","dir":"Changelog","previous_headings":"","what":"grates 1.0.1","title":"grates 1.0.1","text":"CRAN release: 2023-04-02 Fix erroneous tests flagged CRAN. user facing changes.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-100","dir":"Changelog","previous_headings":"","what":"grates 1.0.0","title":"grates 1.0.0","text":"CRAN release: 2023-03-17 first major release grates significant refactor undertaken builds upon lessons learnt last two years. Whilst tried limit breaking changes functionality removed function parameters altered (see details ):","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"grates 1.0.0","text":"<grates_month> objects now always stored relative UNIX epoch. equivalent setting origin = 0 previous release. Calling function origin argument now error. Trying create <grates_month> object n set 1 now error. Uses encouraged use <grates_yearmonth> case. <grates_int_period> now defunct fit scope package (.e grouped dates, grouped integers). particular int_period(), as_int_period() is_int_period() now error use. origin parameter <grates_period> renamed offset better reflect usage. Users need update uses period(), as_period() scale_x_grates_period() reflect . as_yearweek() longer parsers character strings form “YYYY-Www” (e.g. “2020-W01”). Constructors yearweek() isoweek() epiweek() now allow construction grates objects directly year week integer vectors. yearmonth() yearquarter() constructors similarly changed allow construction year month/quarter integer vectors. old incarnation direct constructors now begin new_ prefix (e.g. new_month(), new_yearweek(), new_epiweek(), …). distinguish user friendly constructors introduced (see ).","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"new-functions-and-classes-1-0-0","dir":"Changelog","previous_headings":"","what":"new functions and classes","title":"grates 1.0.0","text":"new yearmonth class (<grates_yearmonth>) associated functions introduced. object similar previously obtained via call month(x, n = 1L, origin = 0L) (now defunct - see ). New isoweek epiweek classes (<grates_isoweek> <grates_epiweek> respectively) associated functions. Internally similar corresponding <grates_yearweek> objects marginally efficient implementation.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"grates 1.0.0","text":".numeric() methods grates objects previously returned FALSE. Calls methods now dispatch default implementation based underlying type now return TRUE.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"miscellaneous-1-0-0","dir":"Changelog","previous_headings":"","what":"miscellaneous","title":"grates 1.0.0","text":"Hard dependencies clock vctrs now removed.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-031","dir":"Changelog","previous_headings":"","what":"grates 0.3.1","title":"grates 0.3.1","text":"CRAN release: 2022-11-10 Fix changes made POSIXlt objects R-devel.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-030","dir":"Changelog","previous_headings":"","what":"grates 0.3.0","title":"grates 0.3.0","text":"CRAN release: 2021-10-21","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"grates 0.3.0","text":"seq() methods now implemented grates objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"grates 0.3.0","text":"Conversion functions now preserve names. Bug fixes cast functions operating objects class different attributes.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-020","dir":"Changelog","previous_headings":"","what":"grates 0.2.0","title":"grates 0.2.0","text":"CRAN release: 2021-05-28 breaking release changes underlying implementations different grate constructors associated scales ggplot2. also renaming function arguments bring greater consistency across packages. now make use high level API introduced clock package working R’s date date-time types.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-012","dir":"Changelog","previous_headings":"","what":"grates 0.1.2","title":"grates 0.1.2","text":"CRAN release: 2021-03-28","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"grates 0.1.2","text":"Fixed bug affecting scale_x_period()","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-011","dir":"Changelog","previous_headings":"","what":"grates 0.1.1","title":"grates 0.1.1","text":"CRAN release: 2021-03-19 Initial release","code":""}]

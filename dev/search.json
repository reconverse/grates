[{"path":"http://www.reconverse.org/grates/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 grates authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.reconverse.org/grates/dev/articles/introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"grates tries make easy perform common date grouping operation providing simple coherent implementations variety ofgrouped date classes: grates_yearweek arbitrary first day week (see as_yearweek()); grates_month (see as_month()); grates_quarter (see as_quarter()); grates_year (see as_year()); grates_period grates_int_period periods constant length (see as_period() as_int_period()). classes aim formalise idea grouped date whilst also intuitive use. build upon ideas Davis Vaughan datea package. well class implementations also provide x-axis scales use ggplot2. NOTE: plotting graphs may want flexibility built scales provide. find situation always option convert grouped object date using provided .Date method. return date lower bound grouping. Equally can convert factor .factor.","code":"library(grates) library(ggplot2) library(outbreaks) library(dplyr)"},{"path":"http://www.reconverse.org/grates/dev/articles/introduction.html","id":"grates_yearweek","dir":"Articles","previous_headings":"Overview","what":"grates_yearweek","title":"Introduction","text":"as_yearweek() allows create grates_yearweek objects. arguments takes, x, date vector wish group firstday, day week wish weeks start ; (defaults 1 (Monday) can go 7 (Sunday)). first week year defined first week containing 4 days new calendar year. means calendar year can sometimes different associated yearweek object. make working yearweek grouped date objects easier adopting logical conventions:  can date labels x_axis utilising scale_x_grate_yearweek:","code":"# create weekday names wdays <- weekdays(as.Date(as_yearweek(as.Date(\"2020-01-01\"), firstday = 1L)) + 0:6) wdays <- setNames(1:7, wdays)  # example of how weeks vary by firstday over December and January dates <- as.Date(\"2020-12-29\") + 0:5 dat <- lapply(wdays, function(x) as_yearweek(dates, x)) bind_cols(dates = dates, dat) #> # A tibble: 6 × 8 #>   dates        Monday  Tuesday Wednesday Thursday   Friday Saturday   Sunday #>   <date>       <yrwk>   <yrwk>    <yrwk>   <yrwk>   <yrwk>   <yrwk>   <yrwk> #> 1 2020-12-29 2020-W53 2021-W01  2020-W52 2020-W52 2020-W52 2020-W52 2020-W53 #> 2 2020-12-30 2020-W53 2021-W01  2021-W01 2020-W52 2020-W52 2020-W52 2020-W53 #> 3 2020-12-31 2020-W53 2021-W01  2021-W01 2021-W01 2020-W52 2020-W52 2020-W53 #> 4 2021-01-01 2020-W53 2021-W01  2021-W01 2021-W01 2021-W01 2020-W52 2020-W53 #> 5 2021-01-02 2020-W53 2021-W01  2021-W01 2021-W01 2021-W01 2021-W01 2020-W53 #> 6 2021-01-03 2020-W53 2021-W01  2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 dates <- as.Date(\"2021-01-01\") + 0:30 weeks <- as_yearweek(dates, firstday = 5) # firstday = 5 to match first day of year head(weeks, 8) #> <grates_yearweek[8]> #> [1] 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W02 str(weeks) #>  yrwk [1:31] 2021-W01, 2021-W01, 2021-W01, 2021-W01, 2021-W01, 2021-W01, 20... #>  @ firstday: int 5 dat <- tibble(dates, weeks)  # addition of wholenumbers will add the corresponding number of weeks to the object dat %>%    mutate(plus4 = weeks + 4) #> # A tibble: 31 × 3 #>    dates         weeks    plus4 #>    <date>       <yrwk>   <yrwk> #>  1 2021-01-01 2021-W01 2021-W05 #>  2 2021-01-02 2021-W01 2021-W05 #>  3 2021-01-03 2021-W01 2021-W05 #>  4 2021-01-04 2021-W01 2021-W05 #>  5 2021-01-05 2021-W01 2021-W05 #>  6 2021-01-06 2021-W01 2021-W05 #>  7 2021-01-07 2021-W01 2021-W05 #>  8 2021-01-08 2021-W02 2021-W06 #>  9 2021-01-09 2021-W02 2021-W06 #> 10 2021-01-10 2021-W02 2021-W06 #> # … with 21 more rows  # addition of two yearweek objects will error as it is unclear what the intention is dat %>%    mutate(plus4 = weeks + weeks) #> Error in `mutate()`: #> ! Problem while computing `plus4 = weeks + weeks`. #> Caused by error in `vec_arith()`: #> ! <grates_yearweek> + <grates_yearweek> is not permitted  # Subtraction of wholenumbers works similarly to addition dat %>%    mutate(minus4 = weeks - 4) #> # A tibble: 31 × 3 #>    dates         weeks   minus4 #>    <date>       <yrwk>   <yrwk> #>  1 2021-01-01 2021-W01 2020-W49 #>  2 2021-01-02 2021-W01 2020-W49 #>  3 2021-01-03 2021-W01 2020-W49 #>  4 2021-01-04 2021-W01 2020-W49 #>  5 2021-01-05 2021-W01 2020-W49 #>  6 2021-01-06 2021-W01 2020-W49 #>  7 2021-01-07 2021-W01 2020-W49 #>  8 2021-01-08 2021-W02 2020-W50 #>  9 2021-01-09 2021-W02 2020-W50 #> 10 2021-01-10 2021-W02 2020-W50 #> # … with 21 more rows  # Subtraction of two yearweek objects gives the difference in weeks between them dat %>%    mutate(plus4 = weeks + 4, difference = plus4 - weeks) #> # A tibble: 31 × 4 #>    dates         weeks    plus4 difference #>    <date>       <yrwk>   <yrwk>      <int> #>  1 2021-01-01 2021-W01 2021-W05          4 #>  2 2021-01-02 2021-W01 2021-W05          4 #>  3 2021-01-03 2021-W01 2021-W05          4 #>  4 2021-01-04 2021-W01 2021-W05          4 #>  5 2021-01-05 2021-W01 2021-W05          4 #>  6 2021-01-06 2021-W01 2021-W05          4 #>  7 2021-01-07 2021-W01 2021-W05          4 #>  8 2021-01-08 2021-W02 2021-W06          4 #>  9 2021-01-09 2021-W02 2021-W06          4 #> 10 2021-01-10 2021-W02 2021-W06          4 #> # … with 21 more rows  # weeks can be combined if they have the same firstday but not otherwise wk1 <- as_yearweek(\"2020-01-01\") wk2 <- as_yearweek(\"2021-01-01\") c(wk1, wk2) #> <grates_yearweek[2]> #> [1] 2020-W01 2020-W53 wk3 <- as_yearweek(\"2020-01-01\", firstday = 2) c(wk1, wk3) #> Error in `vec_ptype2.grates_yearweek.grates_yearweek()`: #> ! Can't combine <grates_yearweek>'s with different `firstday`  # load some simulated linelist data dat <- ebola_sim_clean$linelist  # Example of week plot week_plot <-    dat %>%   mutate(week = as_yearweek(date_of_infection), firstday = 7) %>%    count(week, name = \"cases\") %>%    na.omit() %>%    ggplot(aes(week, cases)) + geom_col(width = 1, colour = \"white\") + theme_bw()  week_plot week_plot + scale_x_grates_yearweek(format = \"%Y-%m-%d\", firstday = 7)"},{"path":"http://www.reconverse.org/grates/dev/articles/introduction.html","id":"grates_month","dir":"Articles","previous_headings":"Overview","what":"grates_month","title":"Introduction","text":"as_month allows users group fixed number months. arguments takes: x, date vector wish group; n, number months wish group (defaulting 1) ; origin, optional value indicating like start periods relative Unix Epoch (1970-01-01). default provided scale creates histogram-like plot (unlike histogram widths intervals plot identical across months) can changed centralised labelling.","code":"month_dat <-    dat %>%   mutate(date = as_month(date_of_infection, n = 2)) %>%    count(date, name = \"cases\") %>%    na.omit()  month_plot <-    ggplot(month_dat, aes(date, cases)) +      geom_col(width = 2, colour = \"white\") +     theme_bw() +      theme(axis.text.x = element_text(angle = 45, hjust=1)) +      xlab(\"\")  month_plot month_plot + scale_x_grates_month(format = NULL, n = 2, origin = 0)"},{"path":"http://www.reconverse.org/grates/dev/articles/introduction.html","id":"grate_quarter-and-grate_year","dir":"Articles","previous_headings":"Overview","what":"grate_quarter and grate_year","title":"Introduction","text":"as_quarter() as_year() behave similarly as_yearweek() main difference main need firstday argument:","code":"# create weekday names dates <- seq(from = as.Date(\"2020-01-01\"), to = as.Date(\"2021-12-01\"), by = \"1 month\")  as_quarter(dates) #> <grates_quarter[24]> #>  [1] 2020-Q1 2020-Q1 2020-Q1 2020-Q2 2020-Q2 2020-Q2 2020-Q3 2020-Q3 2020-Q3 #> [10] 2020-Q4 2020-Q4 2020-Q4 2021-Q1 2021-Q1 2021-Q1 2021-Q2 2021-Q2 2021-Q2 #> [19] 2021-Q3 2021-Q3 2021-Q3 2021-Q4 2021-Q4 2021-Q4 as_year(dates) #> <grates_year[24]> #>  [1] 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 2021 2021 2021 #> [16] 2021 2021 2021 2021 2021 2021 2021 2021 2021 as_quarter(dates[1]) + 0:1 #> <grates_quarter[2]> #> [1] 2020-Q1 2020-Q2 as_year(dates[1]) + 0:1 #> <grates_year[2]> #> [1] 2020 2021  dat %>%   mutate(date = as_quarter(date_of_infection)) %>%    count(date, name = \"cases\") %>%    na.omit() %>%    ggplot(aes(date, cases)) +      geom_col(width = 1, colour = \"white\") +      scale_x_grates_quarter(n.breaks = 10) +     theme_bw() +      xlab(\"\") dat %>%   mutate(date = as_year(date_of_infection)) %>%    count(date, name = \"cases\") %>%    na.omit() %>%    ggplot(aes(date, cases)) +      geom_col(width = 1, colour = \"white\") +      scale_x_grates_year(n.breaks = 2) +     theme_bw() +      xlab(\"\")"},{"path":"http://www.reconverse.org/grates/dev/articles/introduction.html","id":"period","dir":"Articles","previous_headings":"Overview","what":"period","title":"Introduction","text":"as_period() similar as_month() allows users group periods fixed length. arguments takes, x, date integer vector wish group, n origin.","code":"dat %>%   mutate(date = as_period(date_of_infection, n = 14)) %>%    count(date, name = \"cases\") %>%    na.omit() %>%    ggplot(aes(date, cases)) +      geom_col(width = 14, colour = \"white\") +      theme_bw() +      xlab(\"\") dat %>%   mutate(date = as_period(date_of_infection, n = 28)) %>%    count(date, name = \"cases\") %>%    na.omit() %>%    ggplot(aes(date, cases)) +      geom_col(width = 28, colour = \"white\") +      theme_bw() +      xlab(\"\")"},{"path":"http://www.reconverse.org/grates/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Taylor. Author, maintainer.","code":""},{"path":"http://www.reconverse.org/grates/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taylor T (2022). grates: Grouped Date Classes. https://www.reconverse.org/grates/, https://github.com/reconverse/grates.","code":"@Manual{,   title = {grates: Grouped Date Classes},   author = {Tim Taylor},   year = {2022},   note = {https://www.reconverse.org/grates/, https://github.com/reconverse/grates}, }"},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"grates","dir":"","previous_headings":"","what":"Grouped Date Classes","title":"Grouped Date Classes","text":"grates provides simple coherent implementation grouped date classes: grates_yearweek arbitrary first day week (see as_yearweek()); grates_month (see as_month()); grates_quarter (see as_quarter()); grates_year (see as_year()); grates_period grates_int_period periods constant length (see as_period() as_int_period()). classes aim formalise idea grouped date whilst also intuitive use. build upon ideas Davis Vaughan datea package. grouped date classes, grates also provides scales use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Grouped Date Classes","text":"can install released version grates CRAN : development version grates can installed GitHub :","code":"install.packages(\"grates\") remotes::install_github(\"reconverse/grates\")"},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Grouped Date Classes","text":"short illustration grates functionality provided worked example detailed introduction can found included vignette","code":"`vignette(\"introduction\", package = \"grates\")`"},{"path":"http://www.reconverse.org/grates/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Grouped Date Classes","text":"make working <grates_yearweek> grouped date objects easier adopting logical conventions:","code":"library(grates)  library(outbreaks)  # for data library(dplyr)      # for data manipulation library(ggplot2)    # for plotting  # load some simulated linelist data dat <- ebola_sim_clean$linelist  # group by week weekly_dat <-    dat %>%   mutate(date = as_yearweek(date_of_infection, firstday = 2)) %>%    count(date, name = \"cases\") %>%    na.omit()  head(weekly_dat, 8) #>       date cases #> 1 2014-W12     1 #> 2 2014-W15     1 #> 3 2014-W16     1 #> 4 2014-W17     4 #> 5 2014-W18    10 #> 6 2014-W19    12 #> 7 2014-W20    12 #> 8 2014-W21    15  # plot ggplot(weekly_dat, aes(date, cases)) + geom_col(width = 1, colour = \"white\") + theme_bw() + xlab(\"\") dates <- as.Date(\"2021-01-01\") + 0:30 weeks <- as_yearweek(dates, firstday = 5) # firstday = 5 to match first day of year head(weeks, 8) #> <grates_yearweek[8]> #> [1] 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W01 2021-W02 str(weeks) #>  yrwk [1:31] 2021-W01, 2021-W01, 2021-W01, 2021-W01, 2021-W01, 2021-W01, 20... #>  @ firstday: int 5 dat <- tibble(dates, weeks)  # addition of wholenumbers will add the corresponding number of weeks to the object mutate(dat, plus4 = weeks + 4) #> # A tibble: 31 × 3 #>    dates         weeks    plus4 #>    <date>       <yrwk>   <yrwk> #>  1 2021-01-01 2021-W01 2021-W05 #>  2 2021-01-02 2021-W01 2021-W05 #>  3 2021-01-03 2021-W01 2021-W05 #>  4 2021-01-04 2021-W01 2021-W05 #>  5 2021-01-05 2021-W01 2021-W05 #>  6 2021-01-06 2021-W01 2021-W05 #>  7 2021-01-07 2021-W01 2021-W05 #>  8 2021-01-08 2021-W02 2021-W06 #>  9 2021-01-09 2021-W02 2021-W06 #> 10 2021-01-10 2021-W02 2021-W06 #> # … with 21 more rows  # addition of two yearweek objects will error as it is unclear what the intention is mutate(dat, addweeks = weeks + weeks) #> Error in `mutate()`: #> ! Problem while computing `addweeks = weeks + weeks`. #> Caused by error in `vec_arith()`: #> ! <grates_yearweek> + <grates_yearweek> is not permitted  # Subtraction of wholenumbers works similarly to addition mutate(dat, minus4 = weeks - 4) #> # A tibble: 31 × 3 #>    dates         weeks   minus4 #>    <date>       <yrwk>   <yrwk> #>  1 2021-01-01 2021-W01 2020-W49 #>  2 2021-01-02 2021-W01 2020-W49 #>  3 2021-01-03 2021-W01 2020-W49 #>  4 2021-01-04 2021-W01 2020-W49 #>  5 2021-01-05 2021-W01 2020-W49 #>  6 2021-01-06 2021-W01 2020-W49 #>  7 2021-01-07 2021-W01 2020-W49 #>  8 2021-01-08 2021-W02 2020-W50 #>  9 2021-01-09 2021-W02 2020-W50 #> 10 2021-01-10 2021-W02 2020-W50 #> # … with 21 more rows  # Subtraction of two yearweek objects gives the difference in weeks between them mutate(dat, plus4 = weeks + 4, difference = plus4 - weeks) #> # A tibble: 31 × 4 #>    dates         weeks    plus4 difference #>    <date>       <yrwk>   <yrwk>      <int> #>  1 2021-01-01 2021-W01 2021-W05          4 #>  2 2021-01-02 2021-W01 2021-W05          4 #>  3 2021-01-03 2021-W01 2021-W05          4 #>  4 2021-01-04 2021-W01 2021-W05          4 #>  5 2021-01-05 2021-W01 2021-W05          4 #>  6 2021-01-06 2021-W01 2021-W05          4 #>  7 2021-01-07 2021-W01 2021-W05          4 #>  8 2021-01-08 2021-W02 2021-W06          4 #>  9 2021-01-09 2021-W02 2021-W06          4 #> 10 2021-01-10 2021-W02 2021-W06          4 #> # … with 21 more rows  # weeks can be combined if they have the same firstday but not otherwise wk1 <- as_yearweek(\"2020-01-01\") wk2 <- as_yearweek(\"2021-01-01\") c(wk1, wk2) #> <grates_yearweek[2]> #> [1] 2020-W01 2020-W53 wk3 <- as_yearweek(\"2020-01-01\", firstday = 2) c(wk1, wk3) #> Error in `vec_ptype2.grates_yearweek.grates_yearweek()`: #> ! Can't combine <grates_yearweek>'s with different `firstday`"},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_int_period object — as_int_period","title":"Convert an object to grates_int_period object — as_int_period","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_int_period object — as_int_period","text":"","code":"as_int_period(x, ...)  # S3 method for default as_int_period(x, n = 1L, origin = 0L, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_int_period object — as_int_period","text":"x object convert. ... currently used. n integer indicating (fixed) number days used grouping; defaults 1. origin Day grouping begins (default 0).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_int_period object — as_int_period","text":"grates_int_period object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert an object to grates_int_period object — as_int_period","text":"Internally grates_int_period objects stored number days earliest day specified grouping.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_int_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_int_period object — as_int_period","text":"","code":"as_int_period(0:10, n = 2) #> <grates_int_period[11]> #>  [1] 0 to 1   0 to 1   2 to 3   2 to 3   4 to 5   4 to 5   6 to 7   6 to 7   #>  [9] 8 to 9   8 to 9   10 to 11"},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_month object — as_month","title":"Convert an object to grates_month object — as_month","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_month object — as_month","text":"","code":"as_month(x, ...)  # S3 method for default as_month(x, n = 1L, origin = 0L, ...)  # S3 method for character as_month(x, n = 1L, origin = 0L, format = NULL, locale = clock_locale(), ...)  # S3 method for factor as_month(x, n = 1L, origin = 0L, format = NULL, locale = clock_locale(), ...)  # S3 method for factor as_quarter(x, format = NULL, locale = clock_locale(), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_month object — as_month","text":"x object convert. ... currently used. n Number months grouped (default 1). origin Month since Unix epoch grouping begins (default 0). format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_month object — as_month","text":"grates_month object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert an object to grates_month object — as_month","text":"Internally grates_month objects stored number months (starting 0) since Unix Epoch (1970-01-01) earliest month grouping. Precision month level (.e. day month always dropped).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert an object to grates_month object — as_month","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_month object — as_month","text":"","code":"as_month(Sys.Date()) #> <grates_month[1]> #> [1] 2022-Nov as_month(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_month[1]> #> [1] 2019-Mar as_month(\"2019-05-03\") #> <grates_month[1]> #> [1] 2019-May"},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_period object — as_period","title":"Convert an object to grates_period object — as_period","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_period object — as_period","text":"","code":"as_period(x, ...)  # S3 method for default as_period(x, n = 1L, origin = 0L, ...)  # S3 method for character as_period(x, n = 1L, origin = 0L, format = NULL, locale = clock_locale(), ...)  # S3 method for factor as_period(x, n = 1L, origin = 0L, format = NULL, locale = clock_locale(), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_period object — as_period","text":"x object convert. ... currently used. n integer indicating (fixed) number days used grouping; defaults 1. origin Month since Unix epoch grouping begins (default 0). format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_period object — as_period","text":"grates_period object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert an object to grates_period object — as_period","text":"Internally grates_period objects stored number days (starting 0) since Unix Epoch (1970-01-01) earliest day specified grouping.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_period object — as_period","text":"","code":"as_period(Sys.Date()) #> <grates_period[1]> #> [1] 2022-11-16 as_period(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_period[1]> #> [1] 2019-03-04 as_period(\"2019-05-03\") #> <grates_period[1]> #> [1] 2019-05-03"},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_quarter object — as_quarter","title":"Convert an object to grates_quarter object — as_quarter","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_quarter object — as_quarter","text":"","code":"as_quarter(x, ...)  # S3 method for default as_quarter(x, ...)  # S3 method for character as_quarter(x, format = NULL, locale = clock_locale(), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_quarter object — as_quarter","text":"x object convert. ... currently used. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_quarter object — as_quarter","text":"grates_quarter object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert an object to grates_quarter object — as_quarter","text":"Internally grates_quarter objects stored number quarters (starting 0) since Unix Epoch (1970-01-01)","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_quarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_quarter object — as_quarter","text":"","code":"as_quarter(Sys.Date()) #> <grates_quarter[1]> #> [1] 2022-Q4 as_quarter(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\")) #> <grates_quarter[1]> #> [1] 2019-Q1 as_quarter(\"2019-05-03\") #> <grates_quarter[1]> #> [1] 2019-Q2"},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_year object — as_year","title":"Convert an object to grates_year object — as_year","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_year object — as_year","text":"","code":"as_year(x, ...)  # S3 method for default as_year(x, ...)  # S3 method for character as_year(x, format = NULL, locale = clock_locale(), ...)  # S3 method for factor as_year(x, format = NULL, locale = clock_locale(), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_year object — as_year","text":"x object convert. ... currently used. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_year object — as_year","text":"grates_year object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_year object — as_year","text":"","code":"as_year(Sys.Date()) #> <grates_year[1]> #> [1] 2022 as_year(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\"), interval = 2) #> <grates_year[1]> #> [1] 2019 as_year(\"2019-05-03\") #> <grates_year[1]> #> [1] 2019"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to grates_yearweek — as_yearweek","title":"Convert an object to grates_yearweek — as_yearweek","text":"Date, POSIXct, POSIXlt converted, timezone respected, using clock::as_date(). Character input parsed two methods. Firstly, format = NULL character input first checked see format \"YYYY-Www\" (e.g. \"2021-W03\") parsed accordingly. different format, format non-NULL parsed  using clock::date_parse().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to grates_yearweek — as_yearweek","text":"","code":"as_yearweek(x, firstday = 1L, ...)  # S3 method for default as_yearweek(x, firstday = 1L, ...)  # S3 method for character as_yearweek(   x,   firstday = 1L,   format = \"%Y-%m-%d\",   locale = clock_locale(),   ... )  # S3 method for factor as_yearweek(x, firstday = 1L, format = NULL, locale = clock_locale(), ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to grates_yearweek — as_yearweek","text":"x object coerce yearweekly. firstday integer representing day week starts 1 (Monday) 7 (Sunday). ... currently used. format [character / NULL] format string. combination following commands, NULL, case default format string used. vector multiple format strings can supplied. tried order provided. Year %C: century decimal number. modified command %NC N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %y: last two decimal digits year. century otherwise specified (e.g. %C), values range [69 - 99] presumed refer years [1969 - 1999], values range [00 - 68] presumed refer years [2000 - 2068]. modified command %Ny, N positive decimal integer, specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %Y: year decimal number. modified command %NY N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. Month %b, %B, %h: locale's full abbreviated case-insensitive month name. %m: month decimal number. January 1. modified command %Nm N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day %d, %e: day month decimal number. modified command %Nd N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day week %, %: locale's full abbreviated case-insensitive weekday name. %w: weekday decimal number (0-6), Sunday 0. modified command %Nw N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. ISO 8601 week-based year %g: last two decimal digits ISO week-based year. modified command %Ng N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %G: ISO week-based year decimal number. modified command %NG N positive decimal integer specifies maximum number characters read. specified, default 4. Leading zeroes permitted required. %V: ISO week-based week number decimal number. modified command %NV N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %u: ISO weekday decimal number (1-7), Monday 1. modified command %Nu N positive decimal integer specifies maximum number characters read. specified, default 1. Leading zeroes permitted required. Week year %U: week number year decimal number. first Sunday year first day week 01. Days year prior week 00. modified command %NU N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %W: week number year decimal number. first Monday year first day week 01. Days year prior week 00. modified command %NW N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. Day year %j: day year decimal number. January 1 1. modified command %Nj N positive decimal integer specifies maximum number characters read. specified, default 3. Leading zeroes permitted required. Date %D, %x: Equivalent %m/%d/%y. %F: Equivalent %Y-%m-%d. modified width (like %NF), width applied %Y. Time day %H: hour (24-hour clock) decimal number. modified command %NH N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %: hour (12-hour clock) decimal number. modified command %NI N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %M: minutes decimal number. modified command %NM N positive decimal integer specifies maximum number characters read. specified, default 2. Leading zeroes permitted required. %S: seconds decimal number. Leading zeroes permitted required. encountered, locale determines decimal point character. Generally, maximum number characters read determined precision parsing . example, precision \"second\" read maximum 2 characters, precision \"millisecond\" read maximum 6 (2 values decimal point, 1 decimal point, 3 values ). modified command %NS, N positive decimal integer, can used exactly specify maximum number characters read. useful happen seconds 1 leading zero. %p: locale's equivalent /PM designations associated 12-hour clock. command %must precede %p format string. %R: Equivalent %H:%M. %T, %X: Equivalent %H:%M:%S. %r: Equivalent %:%M:%S %p. Time zone %z: offset UTC format [+|-]hh[mm]. example -0430 refers 4 hours 30 minutes behind UTC. 04 refers 4 hours ahead UTC. modified command %Ez parses : hours minutes leading zeroes hour field optional: [+|-]h[h][:mm]. example -04:30 refers 4 hours 30 minutes behind UTC. 4 refers 4 hours ahead UTC. %Z: full time zone name time zone abbreviation, depending function used. single word parsed. word can contain characters alphanumeric, one '_', '/', '-' '+'. Miscellaneous %c: date time representation. Equivalent %%b %d %H:%M:%S %Y. %%: % character. %n: Matches one white space character. %n, %t, space can combined match wide range white-space patterns. example \"%n \" matches one white space characters, \"%n%t%t\" matches one three white space characters. %t: Matches zero one white space characters. locale [clock_locale] locale object created clock_locale().","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to grates_yearweek — as_yearweek","text":"grates_yearweek object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert an object to grates_yearweek — as_yearweek","text":"Internally grates_yearweek objects stored number weeks date firstday nearest Unix Epoch (1970-01-01).  :","code":"- 1969-12-29 for `firstday` as Monday - 1969-12-30 for `firstday` as Tuesday - 1969-12-31 for `firstday` as Wednesday - 1970-01-01 for `firstday` as Thursday - 1970-01-02 for `firstday` as Friday - 1970-01-03 for `firstday` as Saturday - 1970-01-04 for `firstday` as Sunday"},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/as_yearweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to grates_yearweek — as_yearweek","text":"","code":"as_yearweek(Sys.Date()) #> <grates_yearweek[1]> #> [1] 2022-W46 as_yearweek(as.POSIXct(\"2019-03-04 01:01:01\", tz = \"America/New_York\")) #> <grates_yearweek[1]> #> [1] 2019-W10 as_yearweek(\"2019-05-03\", firstday = 5L) #> <grates_yearweek[1]> #> [1] 2019-W18 as_yearweek(\"2021-W03\", format = NULL) #> <grates_yearweek[1]> #> [1] 2021-W03"},{"path":"http://www.reconverse.org/grates/dev/reference/clock_locale.html","id":null,"dir":"Reference","previous_headings":"","what":"clock locale — clock_locale","title":"clock locale — clock_locale","text":"objects imported packages. Follow links see documentation. clock clock_locale","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_int_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_int_period object — format.grates_int_period","title":"Format a grates_int_period object — format.grates_int_period","text":"Format grates_int_period object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_int_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_int_period object — format.grates_int_period","text":"","code":"# S3 method for grates_int_period format(x, sep = \"to\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_int_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_int_period object — format.grates_int_period","text":"x grates_int_period object. sep one day grouped others, sep placed upper lower bounds printing. ... currently used. format format use bounds grates_int_period entry.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_month object — format.grates_month","title":"Format a grates_month object — format.grates_month","text":"Format grates_month object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_month object — format.grates_month","text":"","code":"# S3 method for grates_month format(x, format = \"%Y-%b\", sep = \"to\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_month object — format.grates_month","text":"x grates_month object. format format use bounds grates_month entry. sep one month grouped others, sep placed upper lower bounds printing. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_period object — format.grates_period","title":"Format a grates_period object — format.grates_period","text":"Format grates_period object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_period object — format.grates_period","text":"","code":"# S3 method for grates_period format(x, format = \"%Y-%m-%d\", sep = \"to\", ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_period object — format.grates_period","text":"x grates_period object. format format use bounds grates_period entry. sep one day grouped others, sep placed upper lower bounds printing. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_quarter object — format.grates_quarter","title":"Format a grates_quarter object — format.grates_quarter","text":"Format grates_quarter object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_quarter object — format.grates_quarter","text":"","code":"# S3 method for grates_quarter format(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_quarter object — format.grates_quarter","text":"x grates_quarter object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_year object — format.grates_year","title":"Format a grates_year object — format.grates_year","text":"Format grates_year object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_year object — format.grates_year","text":"","code":"# S3 method for grates_year format(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_year object — format.grates_year","text":"x grates_year object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a grates_yearweek object — format.grates_yearweek","title":"Format a grates_yearweek object — format.grates_yearweek","text":"Format grates_yearweek object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a grates_yearweek object — format.grates_yearweek","text":"","code":"# S3 method for grates_yearweek format(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/format.grates_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a grates_yearweek object — format.grates_yearweek","text":"x grates_yearweek object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates-package.html","id":null,"dir":"Reference","previous_headings":"","what":"grates: Grouped Date Classes — grates-package","title":"grates: Grouped Date Classes — grates-package","text":"Provides coherent interface implementation creating grouped date classes. package part RECON (https://www.repidemicsconsortium.org/) toolkit outbreak analysis.","code":""},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/reference/grates-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"grates: Grouped Date Classes — grates-package","text":"Maintainer: Tim Taylor tim.taylor@hiddenelephants.co.uk (ORCID)","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — grates-vctrs","title":"Internal vctrs methods — grates-vctrs","text":"Internal vctrs methods","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates_accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouped date accessors — grates_accessors","title":"Grouped date accessors — grates_accessors","text":"Generics methods work grouped date objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates_accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouped date accessors — grates_accessors","text":"","code":"get_n(x, ...)  # S3 method for default get_n(x, ...)  # S3 method for grates_month get_n(x, ...)  # S3 method for grates_period get_n(x, ...)  # S3 method for grates_int_period get_n(x, ...)  get_firstday(x, ...)  # S3 method for default get_firstday(x, ...)  # S3 method for grates_yearweek get_firstday(x, ...)  get_week(x, ...)  # S3 method for default get_week(x, ...)  # S3 method for grates_yearweek get_week(x, ...)  get_quarter(x, ...)  # S3 method for default get_quarter(x, ...)  # S3 method for grates_quarter get_quarter(x, ...)  get_year(x, ...)  # S3 method for default get_year(x, ...)  # S3 method for grates_yearweek get_year(x, ...)  # S3 method for grates_quarter get_year(x, ...)  # S3 method for grates_year get_year(x, ...)  get_date_range(x, ...)  # S3 method for default get_date_range(x, ...)  # S3 method for grates_yearweek get_date_range(x, ...)  # S3 method for grates_month get_date_range(x, ...)  # S3 method for grates_quarter get_date_range(x, ...)  # S3 method for grates_period get_date_range(x, ...)  # S3 method for grates_year get_date_range(x, ...)  # S3 method for grates_int_period get_date_range(x, ...)"},{"path":"http://www.reconverse.org/grates/dev/reference/grates_accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouped date accessors — grates_accessors","text":"x grates object. ... currently used.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/grates_accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouped date accessors — grates_accessors","text":"get_year(): corresponding year values integer <grates_year> <greats_quarter> objects. get_quarter(): corresponding quarter values integer <greats_quarter> objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/hidden-scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Hidden scales — hidden-scales","title":"Hidden scales — hidden-scales","text":"Wrappers around scale_x_grates_yearweek() pre-specified firstday argument.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/hidden-scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hidden scales — hidden-scales","text":"","code":"scale_x_yearweek_1(..., n.breaks = 6)  scale_x_yearweek_2(..., n.breaks = 6)  scale_x_yearweek_3(..., n.breaks = 6)  scale_x_yearweek_4(..., n.breaks = 6)  scale_x_yearweek_5(..., n.breaks = 6)  scale_x_yearweek_6(..., n.breaks = 6)  scale_x_yearweek_7(..., n.breaks = 6)"},{"path":"http://www.reconverse.org/grates/dev/reference/hidden-scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hidden scales — hidden-scales","text":"... currently used. n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/hidden-scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hidden scales — hidden-scales","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_int_period object — int_period","title":"Construct a grates_int_period object — int_period","text":"period() constructor <grates_int_period> object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_int_period object — int_period","text":"","code":"int_period(x = integer(), n = 1L, origin = 0L)  is_int_period(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_int_period object — int_period","text":"x Integer vector representing number days beginning specified grouping. n integer indicating (fixed) number days used grouping; defaults 1. origin Day grouping begins (default 0).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a grates_int_period object — int_period","text":"<grates_int_period> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct a grates_int_period object — int_period","text":"allow easy comparison <grates_int_period> object, origin stored value modulo n (.e origin <- origin %% n).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/int_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_int_period object — int_period","text":"","code":"int_period(1, n = 2, origin = 1) #> <grates_int_period[1]> #> [1] 1 to 2"},{"path":"http://www.reconverse.org/grates/dev/reference/is_grate.html","id":null,"dir":"Reference","previous_headings":"","what":"Is object a grouped date — is_grate","title":"Is object a grouped date — is_grate","text":"object grouped date","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/is_grate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is object a grouped date — is_grate","text":"","code":"is_grate(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/is_grate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is object a grouped date — is_grate","text":"x Grouped date object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/is_grate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is object a grouped date — is_grate","text":"Logical.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/is_grate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is object a grouped date — is_grate","text":"","code":"is_grate(as_yearweek(Sys.Date())) #> [1] TRUE"},{"path":"http://www.reconverse.org/grates/dev/reference/month.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_month object — month","title":"Construct a grates_month object — month","text":"month() constructor <grates_month> object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_month object — month","text":"","code":"month(x = integer(), n = 1L, origin = 0L)  is_month(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_month object — month","text":"x Integer vector representing number months since Unix epoch (1970-01-01). n Number months grouped (default 1). origin Month since Unix epoch grouping begins (default 0).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/month.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct a grates_month object — month","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_month object — month","text":"","code":"month(1) #> <grates_month[1]> #> [1] 1970-Feb month(c(4, 7), n = 3, origin = 1) #> <grates_month[2]> #> [1] 1970-May to 1970-Jul 1970-Aug to 1970-Oct"},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_period object — period","title":"Construct a grates_period object — period","text":"period() constructor <grates_period> object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_period object — period","text":"","code":"period(x = integer(), n = 1L, origin = 0L)  is_period(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_period object — period","text":"x Integer vector representing number days since Unix epoch (1970-01-01) beginning specified grouping. n integer indicating (fixed) number days used grouping; defaults 1. origin Day since Unix epoch grouping begins (default 0).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a grates_period object — period","text":"<grates_period> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Construct a grates_period object — period","text":"allow easy comparison <grates_period> object, origin stored value modulo n (.e origin <- origin %% n).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_period object — period","text":"","code":"period(1, n = 2, origin = 1) #> <grates_period[1]> #> [1] 1970-01-02 to 1970-01-03"},{"path":"http://www.reconverse.org/grates/dev/reference/quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_quarter object — quarter","title":"Construct a grates_quarter object — quarter","text":"quarter() constructor <grates_quarter> object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_quarter object — quarter","text":"","code":"quarter(x = integer())  is_quarter(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_quarter object — quarter","text":"x Integer vector representing number quarters (starting 0), since Unix epoch (1970-01-01).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/quarter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct a grates_quarter object — quarter","text":"algorithm convert dates months relative UNIX Epoch comes work Davis Vaughan unreleased datea package.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/quarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_quarter object — quarter","text":"","code":"quarter(0:3) #> <grates_quarter[4]> #> [1] 1970-Q1 1970-Q2 1970-Q3 1970-Q4"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_int_period.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_int_period> scale — scale_x_grates_int_period","title":"<grates_int_period> scale — scale_x_grates_int_period","text":"ggplot2 scale <grates_int_period> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_int_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_int_period> scale — scale_x_grates_int_period","text":"","code":"scale_x_grates_int_period(n.breaks = 6, n, origin)"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_int_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_int_period> scale — scale_x_grates_int_period","text":"n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6). n Number days used original grouping. origin Original day grouping began.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_int_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_int_period> scale — scale_x_grates_int_period","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_month> scale — scale_x_grates_month","title":"<grates_month> scale — scale_x_grates_month","text":"ggplot2 scale <grates_month> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_month> scale — scale_x_grates_month","text":"","code":"scale_x_grates_month(   n.breaks = 6,   format = \"%Y-%m-%d\",   bounds_format = \"%Y-%b\",   sep = \"to\",   n,   origin )"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_month> scale — scale_x_grates_month","text":"n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6). format Format use \"Date\" scales required. NULL labels centralised form \"lower category bound upper category bound\". NULL value used format.Date() can input acceptable function (defaults \"%Y-%m-%d). bounds_format Format use grouped date labels. used format NULL. sep Separator use grouped date labels. n Number months used original grouping. origin Month since Unix epoch used original grouping.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_month> scale — scale_x_grates_month","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_period> scale — scale_x_grates_period","title":"<grates_period> scale — scale_x_grates_period","text":"ggplot2 scale <grates_period> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_period> scale — scale_x_grates_period","text":"","code":"scale_x_grates_period(n.breaks = 6, format = \"%Y-%m-%d\", n, origin)"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_period> scale — scale_x_grates_period","text":"n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6). format Format use x scale. Passed format.Date(). n Number months used original grouping. origin Month since Unix epoch used original grouping.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_period> scale — scale_x_grates_period","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_quarter> scale — scale_x_grates_quarter","title":"<grates_quarter> scale — scale_x_grates_quarter","text":"ggplot2 scale <grates_quarter> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_quarter> scale — scale_x_grates_quarter","text":"","code":"scale_x_grates_quarter(n.breaks = 6, format = NULL)"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_quarter> scale — scale_x_grates_quarter","text":"n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6). format Format use \"Date\" scales required. NULL labels centralised form \"YYYY-Qq. NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_quarter> scale — scale_x_grates_quarter","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_year> scale — scale_x_grates_year","title":"<grates_year> scale — scale_x_grates_year","text":"ggplot2 scale <grates_year> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_year> scale — scale_x_grates_year","text":"","code":"scale_x_grates_year(..., n.breaks = 6)"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_year> scale — scale_x_grates_year","text":"... currently used. n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6).","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_year> scale — scale_x_grates_year","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"<grates_yearweek> scale — scale_x_grates_yearweek","title":"<grates_yearweek> scale — scale_x_grates_yearweek","text":"ggplot2 scale <grates_yearweek> vector.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"<grates_yearweek> scale — scale_x_grates_yearweek","text":"","code":"scale_x_grates_yearweek(..., n.breaks = 6, firstday, format = NULL)"},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"<grates_yearweek> scale — scale_x_grates_yearweek","text":"... currently used. n.breaks Approximate number breaks calculated using scales::breaks_pretty (default 6). firstday Integer value first weekday: 1 (Monday) 7 (Sunday). format Format use \"Date\" scales required. NULL (default) labels centralised form \"lower category bound upper category bound\". NULL value used format.Date() can input acceptable function.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/scale_x_grates_yearweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"<grates_yearweek> scale — scale_x_grates_yearweek","text":"scale use ggplot2.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_year object — year","title":"Construct a grates_year object — year","text":"year() constructor <grates_year> object","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_year object — year","text":"","code":"year(x = integer())  is_year(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_year object — year","text":"x Integer vector representing year.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_year object — year","text":"","code":"year(2021) #> <grates_year[1]> #> [1] 2021"},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a grates_yearweek object — yearweek","title":"Construct a grates_yearweek object — yearweek","text":"yearweek() constructor <grates_yearweek> object.","code":""},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a grates_yearweek object — yearweek","text":"","code":"yearweek(x = integer(), firstday = 1L)  is_yearweek(x)"},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a grates_yearweek object — yearweek","text":"x Integer vector representing number weeks. firstday integer representing day week starts 1 (Monday) 7 (Sunday). <grates_yearweek> objects stored number weeks (startint 0) date specified firstday nearest Unix Epoch (1970-01-01). , number seven day periods :","code":"- 1969-12-29 for `firstday` equal to 1 (Monday) - 1969-12-30 for `firstday` equal to 2 Tuesday - 1969-12-31 for `firstday` equal to 3 Wednesday - 1970-01-01 for `firstday` equal to 4 Thursday - 1970-01-02 for `firstday` equal to 5 Friday - 1970-01-03 for `firstday` equal to 6 Saturday - 1970-01-04 for `firstday` equal to 7 Sunday"},{"path":"http://www.reconverse.org/grates/dev/reference/yearweek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a grates_yearweek object — yearweek","text":"","code":"yearweek(0:5) #> <grates_yearweek[6]> #> [1] 1970-W01 1970-W02 1970-W03 1970-W04 1970-W05 1970-W06"},{"path":[]},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-031","dir":"Changelog","previous_headings":"","what":"grates 0.3.1","title":"grates 0.3.1","text":"CRAN release: 2022-11-10 Fix changes made POSIXlt objects R-devel.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-030","dir":"Changelog","previous_headings":"","what":"grates 0.3.0","title":"grates 0.3.0","text":"CRAN release: 2021-10-21","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"grates 0.3.0","text":"seq methods now implemented grates objects.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"grates 0.3.0","text":"Conversion functions now preserve names. Bug fixes cast functions operating objects class different attributes.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-020","dir":"Changelog","previous_headings":"","what":"grates 0.2.0","title":"grates 0.2.0","text":"CRAN release: 2021-05-28 breaking release changes underlying implementations different grate constructors associated scales ggplot2. also renaming function arguments bring greater consistency across packages. now make use high level API introduced clock package working R’s date date-time types.","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-012","dir":"Changelog","previous_headings":"","what":"grates 0.1.2","title":"grates 0.1.2","text":"CRAN release: 2021-03-28","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"grates 0.1.2","text":"Fixed bug affecting scale_x_period","code":""},{"path":"http://www.reconverse.org/grates/dev/news/index.html","id":"grates-011","dir":"Changelog","previous_headings":"","what":"grates 0.1.1","title":"grates 0.1.1","text":"CRAN release: 2021-03-19 Initial release","code":""}]
